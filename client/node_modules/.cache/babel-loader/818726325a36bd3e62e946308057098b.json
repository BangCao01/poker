{"ast":null,"code":"/*!\n * @pixi/loaders - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/loaders is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Resource, Loader as Loader$1, middleware } from 'resource-loader';\nimport { EventEmitter } from '@pixi/utils';\nimport { Texture } from '@pixi/core';\n/**\n * Loader plugin for handling Texture resources.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\n\nvar TextureLoader = function TextureLoader() {};\n\nTextureLoader.use = function use(resource, next) {\n  // create a new texture if the data is an Image object\n  if (resource.data && resource.type === Resource.TYPE.IMAGE) {\n    resource.texture = Texture.fromLoader(resource.data, resource.url, resource.name);\n  }\n\n  next();\n};\n/**\n * The new loader, extends Resource Loader by Chad Engler: https://github.com/englercj/resource-loader\n *\n * ```js\n * const loader = PIXI.Loader.shared; // PixiJS exposes a premade instance for you to use.\n * //or\n * const loader = new PIXI.Loader(); // you can also create your own if you want\n *\n * const sprites = {};\n *\n * // Chainable `add` to enqueue a resource\n * loader.add('bunny', 'data/bunny.png')\n *       .add('spaceship', 'assets/spritesheet.json');\n * loader.add('scoreFont', 'assets/score.fnt');\n *\n * // Chainable `pre` to add a middleware that runs for each resource, *before* loading that resource.\n * // This is useful to implement custom caching modules (using filesystem, indexeddb, memory, etc).\n * loader.pre(cachingMiddleware);\n *\n * // Chainable `use` to add a middleware that runs for each resource, *after* loading that resource.\n * // This is useful to implement custom parsing modules (like spritesheet parsers, spine parser, etc).\n * loader.use(parsingMiddleware);\n *\n * // The `load` method loads the queue of resources, and calls the passed in callback called once all\n * // resources have loaded.\n * loader.load((loader, resources) => {\n *     // resources is an object where the key is the name of the resource loaded and the value is the resource object.\n *     // They have a couple default properties:\n *     // - `url`: The URL that the resource was loaded from\n *     // - `error`: The error that happened when trying to load (if any)\n *     // - `data`: The raw data that was loaded\n *     // also may contain other properties based on the middleware that runs.\n *     sprites.bunny = new PIXI.TilingSprite(resources.bunny.texture);\n *     sprites.spaceship = new PIXI.TilingSprite(resources.spaceship.texture);\n *     sprites.scoreFont = new PIXI.TilingSprite(resources.scoreFont.texture);\n * });\n *\n * // throughout the process multiple signals can be dispatched.\n * loader.onProgress.add(() => {}); // called once per loaded/errored file\n * loader.onError.add(() => {}); // called once per errored file\n * loader.onLoad.add(() => {}); // called once per loaded file\n * loader.onComplete.add(() => {}); // called once when the queued resources all load.\n * ```\n *\n * @see https://github.com/englercj/resource-loader\n *\n * @class Loader\n * @memberof PIXI\n * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n * @param {number} [concurrency=10] - The number of resources to load concurrently.\n */\n\n\nvar Loader = /*@__PURE__*/function (ResourceLoader) {\n  function Loader(baseUrl, concurrency) {\n    var this$1 = this;\n    ResourceLoader.call(this, baseUrl, concurrency);\n    EventEmitter.call(this);\n\n    for (var i = 0; i < Loader._plugins.length; ++i) {\n      var plugin = Loader._plugins[i];\n      var pre = plugin.pre;\n      var use = plugin.use;\n\n      if (pre) {\n        this.pre(pre);\n      }\n\n      if (use) {\n        this.use(use);\n      }\n    } // Compat layer, translate the new v2 signals into old v1 events.\n\n\n    this.onStart.add(function (l) {\n      return this$1.emit('start', l);\n    });\n    this.onProgress.add(function (l, r) {\n      return this$1.emit('progress', l, r);\n    });\n    this.onError.add(function (e, l, r) {\n      return this$1.emit('error', e, l, r);\n    });\n    this.onLoad.add(function (l, r) {\n      return this$1.emit('load', l, r);\n    });\n    this.onComplete.add(function (l, r) {\n      return this$1.emit('complete', l, r);\n    });\n    /**\n     * If this loader cannot be destroyed.\n     * @member {boolean}\n     * @default false\n     * @private\n     */\n\n    this._protected = false;\n  }\n\n  if (ResourceLoader) Loader.__proto__ = ResourceLoader;\n  Loader.prototype = Object.create(ResourceLoader && ResourceLoader.prototype);\n  Loader.prototype.constructor = Loader;\n  var staticAccessors = {\n    shared: {\n      configurable: true\n    }\n  };\n  /**\n   * Destroy the loader, removes references.\n   * @private\n   */\n\n  Loader.prototype.destroy = function destroy() {\n    if (!this._protected) {\n      this.removeAllListeners();\n      this.reset();\n    }\n  };\n  /**\n   * A premade instance of the loader that can be used to load resources.\n   * @name shared\n   * @type {PIXI.Loader}\n   * @static\n   * @memberof PIXI.Loader\n   */\n\n\n  staticAccessors.shared.get = function () {\n    var shared = Loader._shared;\n\n    if (!shared) {\n      shared = new Loader();\n      shared._protected = true;\n      Loader._shared = shared;\n    }\n\n    return shared;\n  };\n\n  Object.defineProperties(Loader, staticAccessors);\n  return Loader;\n}(Loader$1); // Copy EE3 prototype (mixin)\n\n\nObject.assign(Loader.prototype, EventEmitter.prototype);\n/**\n * Collection of all installed `use` middleware for Loader.\n *\n * @static\n * @member {Array<PIXI.ILoaderPlugin>} _plugins\n * @memberof PIXI.Loader\n * @private\n */\n\nLoader._plugins = [];\n/**\n * Adds a Loader plugin for the global shared loader and all\n * new Loader instances created.\n *\n * @static\n * @method registerPlugin\n * @memberof PIXI.Loader\n * @param {PIXI.ILoaderPlugin} plugin - The plugin to add\n * @return {PIXI.Loader} Reference to PIXI.Loader for chaining\n */\n\nLoader.registerPlugin = function registerPlugin(plugin) {\n  Loader._plugins.push(plugin);\n\n  if (plugin.add) {\n    plugin.add();\n  }\n\n  return Loader;\n}; // parse any blob into more usable objects (e.g. Image)\n\n\nLoader.registerPlugin({\n  use: middleware.parsing\n}); // parse any Image objects into textures\n\nLoader.registerPlugin(TextureLoader);\n/**\n * Plugin to be installed for handling specific Loader resources.\n *\n * @memberof PIXI\n * @typedef ILoaderPlugin\n * @property {function} [add] - Function to call immediate after registering plugin.\n * @property {PIXI.Loader.loaderMiddleware} [pre] - Middleware function to run before load, the\n *           arguments for this are `(resource, next)`\n * @property {PIXI.Loader.loaderMiddleware} [use] - Middleware function to run after load, the\n *           arguments for this are `(resource, next)`\n */\n\n/**\n * @memberof PIXI.Loader\n * @callback loaderMiddleware\n * @param {PIXI.LoaderResource} resource\n * @param {function} next\n */\n\n/**\n * @memberof PIXI.Loader#\n * @member {object} onStart\n */\n\n/**\n * @memberof PIXI.Loader#\n * @member {object} onProgress\n */\n\n/**\n * @memberof PIXI.Loader#\n * @member {object} onError\n */\n\n/**\n * @memberof PIXI.Loader#\n * @member {object} onLoad\n */\n\n/**\n * @memberof PIXI.Loader#\n * @member {object} onComplete\n */\n\n/**\n * Application plugin for supporting loader option. Installing the LoaderPlugin\n * is not necessary if using **pixi.js** or **pixi.js-legacy**.\n * @example\n * import {AppLoaderPlugin} from '@pixi/loaders';\n * import {Application} from '@pixi/app';\n * Application.registerPlugin(AppLoaderPlugin);\n * @class\n * @memberof PIXI\n */\n\nvar AppLoaderPlugin = function AppLoaderPlugin() {};\n\nAppLoaderPlugin.init = function init(options) {\n  options = Object.assign({\n    sharedLoader: false\n  }, options);\n  /**\n   * Loader instance to help with asset loading.\n   * @name PIXI.Application#loader\n   * @type {PIXI.Loader}\n   * @readonly\n   */\n\n  this.loader = options.sharedLoader ? Loader.shared : new Loader();\n};\n/**\n * Called when application destroyed\n * @private\n */\n\n\nAppLoaderPlugin.destroy = function destroy() {\n  if (this.loader) {\n    this.loader.destroy();\n    this.loader = null;\n  }\n};\n/**\n * Reference to **{@link https://github.com/englercj/resource-loader\n * resource-loader}**'s Resource class.\n * @see http://englercj.github.io/resource-loader/Resource.html\n * @class LoaderResource\n * @memberof PIXI\n */\n\n\nvar LoaderResource = Resource;\nexport { AppLoaderPlugin, Loader, LoaderResource, TextureLoader };","map":null,"metadata":{},"sourceType":"module"}