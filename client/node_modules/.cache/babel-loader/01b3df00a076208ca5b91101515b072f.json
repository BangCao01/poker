{"ast":null,"code":"/*!\n * @pixi/accessibility - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/accessibility is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { isMobile, removeItems } from '@pixi/utils';\nimport { DisplayObject } from '@pixi/display';\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.accessibility.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI.accessibility\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibility.accessibleTarget\n *      );\n */\n\nvar accessibleTarget = {\n  /**\n   *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n   *   shadow div with attributes set\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessible: false,\n\n  /**\n   * Sets the title attribute of the shadow div\n   * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n   *\n   * @member {?string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleTitle: null,\n\n  /**\n   * Sets the aria-label attribute of the shadow div\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleHint: null,\n\n  /**\n   * @member {number}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   * @todo Needs docs.\n   */\n  tabIndex: 0,\n\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleActive: false,\n\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleDiv: false,\n\n  /**\n   * Specify the type of div the accessible layer is. Screen readers treat the element differently\n   * depending on this type. Defaults to button.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'button'\n   */\n  accessibleType: 'button',\n\n  /**\n   * Specify the pointer-events the accessible div will use\n   * Defaults to auto.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'auto'\n   */\n  accessiblePointerEvents: 'auto',\n\n  /**\n   * Setting to false will prevent any children inside this container to\n   * be accessible. Defaults to true.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @default true\n   */\n  accessibleChildren: true\n}; // add some extra variables to the container..\n\nDisplayObject.mixin(accessibleTarget);\nvar KEY_CODE_TAB = 9;\nvar DIV_TOUCH_SIZE = 100;\nvar DIV_TOUCH_POS_X = 0;\nvar DIV_TOUCH_POS_Y = 0;\nvar DIV_TOUCH_ZINDEX = 2;\nvar DIV_HOOK_SIZE = 1;\nvar DIV_HOOK_POS_X = -1000;\nvar DIV_HOOK_POS_Y = -1000;\nvar DIV_HOOK_ZINDEX = 2;\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI.accessibility\n */\n\nvar AccessibilityManager = function AccessibilityManager(renderer) {\n  /**\n   * @type {?HTMLElement}\n   * @private\n   */\n  this._hookDiv = null;\n\n  if (isMobile.tablet || isMobile.phone) {\n    this.createTouchHook();\n  } // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n\n\n  var div = document.createElement('div');\n  div.style.width = DIV_TOUCH_SIZE + \"px\";\n  div.style.height = DIV_TOUCH_SIZE + \"px\";\n  div.style.position = 'absolute';\n  div.style.top = DIV_TOUCH_POS_X + \"px\";\n  div.style.left = DIV_TOUCH_POS_Y + \"px\";\n  div.style.zIndex = DIV_TOUCH_ZINDEX;\n  /**\n   * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n   *\n   * @type {HTMLElement}\n   * @private\n   */\n\n  this.div = div;\n  /**\n   * A simple pool for storing divs.\n   *\n   * @type {*}\n   * @private\n   */\n\n  this.pool = [];\n  /**\n   * This is a tick used to check if an object is no longer being rendered.\n   *\n   * @type {Number}\n   * @private\n   */\n\n  this.renderId = 0;\n  /**\n   * Setting this to true will visually show the divs.\n   *\n   * @type {boolean}\n   */\n\n  this.debug = false;\n  /**\n   * The renderer this accessibility manager works for.\n   *\n   * @member {PIXI.AbstractRenderer}\n   */\n\n  this.renderer = renderer;\n  /**\n   * The array of currently active accessible items.\n   *\n   * @member {Array<*>}\n   * @private\n   */\n\n  this.children = [];\n  /**\n   * pre-bind the functions\n   *\n   * @type {Function}\n   * @private\n   */\n\n  this._onKeyDown = this._onKeyDown.bind(this);\n  /**\n   * pre-bind the functions\n   *\n   * @type {Function}\n   * @private\n   */\n\n  this._onMouseMove = this._onMouseMove.bind(this);\n  /**\n   * A flag\n   * @type {boolean}\n   * @readonly\n   */\n\n  this.isActive = false;\n  /**\n   * A flag\n   * @type {boolean}\n   * @readonly\n   */\n\n  this.isMobileAccessibility = false; // let listen for tab.. once pressed we can fire up and show the accessibility layer\n\n  window.addEventListener('keydown', this._onKeyDown, false);\n};\n/**\n * Creates the touch hooks.\n *\n * @private\n */\n\n\nAccessibilityManager.prototype.createTouchHook = function createTouchHook() {\n  var this$1 = this;\n  var hookDiv = document.createElement('button');\n  hookDiv.style.width = DIV_HOOK_SIZE + \"px\";\n  hookDiv.style.height = DIV_HOOK_SIZE + \"px\";\n  hookDiv.style.position = 'absolute';\n  hookDiv.style.top = DIV_HOOK_POS_X + \"px\";\n  hookDiv.style.left = DIV_HOOK_POS_Y + \"px\";\n  hookDiv.style.zIndex = DIV_HOOK_ZINDEX;\n  hookDiv.style.backgroundColor = '#FF0000';\n  hookDiv.title = 'HOOK DIV';\n  hookDiv.addEventListener('focus', function () {\n    this$1.isMobileAccessibility = true;\n    this$1.activate();\n    this$1.destroyTouchHook();\n  });\n  document.body.appendChild(hookDiv);\n  this._hookDiv = hookDiv;\n};\n/**\n * Destroys the touch hooks.\n *\n * @private\n */\n\n\nAccessibilityManager.prototype.destroyTouchHook = function destroyTouchHook() {\n  if (!this._hookDiv) {\n    return;\n  }\n\n  document.body.removeChild(this._hookDiv);\n  this._hookDiv = null;\n};\n/**\n * Activating will cause the Accessibility layer to be shown.\n * This is called when a user presses the tab key.\n *\n * @private\n */\n\n\nAccessibilityManager.prototype.activate = function activate() {\n  if (this.isActive) {\n    return;\n  }\n\n  this.isActive = true;\n  window.document.addEventListener('mousemove', this._onMouseMove, true);\n  window.removeEventListener('keydown', this._onKeyDown, false);\n  this.renderer.on('postrender', this.update, this);\n\n  if (this.renderer.view.parentNode) {\n    this.renderer.view.parentNode.appendChild(this.div);\n  }\n};\n/**\n * Deactivating will cause the Accessibility layer to be hidden.\n * This is called when a user moves the mouse.\n *\n * @private\n */\n\n\nAccessibilityManager.prototype.deactivate = function deactivate() {\n  if (!this.isActive || this.isMobileAccessibility) {\n    return;\n  }\n\n  this.isActive = false;\n  window.document.removeEventListener('mousemove', this._onMouseMove, true);\n  window.addEventListener('keydown', this._onKeyDown, false);\n  this.renderer.off('postrender', this.update);\n\n  if (this.div.parentNode) {\n    this.div.parentNode.removeChild(this.div);\n  }\n};\n/**\n * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n *\n * @private\n * @param {PIXI.Container} displayObject - The DisplayObject to check.\n */\n\n\nAccessibilityManager.prototype.updateAccessibleObjects = function updateAccessibleObjects(displayObject) {\n  if (!displayObject.visible || !displayObject.accessibleChildren) {\n    return;\n  }\n\n  if (displayObject.accessible && displayObject.interactive) {\n    if (!displayObject._accessibleActive) {\n      this.addChild(displayObject);\n    }\n\n    displayObject.renderId = this.renderId;\n  }\n\n  var children = displayObject.children;\n\n  for (var i = 0; i < children.length; i++) {\n    this.updateAccessibleObjects(children[i]);\n  }\n};\n/**\n * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n *\n * @private\n */\n\n\nAccessibilityManager.prototype.update = function update() {\n  if (!this.renderer.renderingToScreen) {\n    return;\n  } // update children...\n\n\n  this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n  var rect = this.renderer.view.getBoundingClientRect();\n  var sx = rect.width / this.renderer.width;\n  var sy = rect.height / this.renderer.height;\n  var div = this.div;\n  div.style.left = rect.left + \"px\";\n  div.style.top = rect.top + \"px\";\n  div.style.width = this.renderer.width + \"px\";\n  div.style.height = this.renderer.height + \"px\";\n\n  for (var i = 0; i < this.children.length; i++) {\n    var child = this.children[i];\n\n    if (child.renderId !== this.renderId) {\n      child._accessibleActive = false;\n      removeItems(this.children, i, 1);\n      this.div.removeChild(child._accessibleDiv);\n      this.pool.push(child._accessibleDiv);\n      child._accessibleDiv = null;\n      i--;\n\n      if (this.children.length === 0) {\n        this.deactivate();\n      }\n    } else {\n      // map div to display..\n      div = child._accessibleDiv;\n      var hitArea = child.hitArea;\n      var wt = child.worldTransform;\n\n      if (child.hitArea) {\n        div.style.left = (wt.tx + hitArea.x * wt.a) * sx + \"px\";\n        div.style.top = (wt.ty + hitArea.y * wt.d) * sy + \"px\";\n        div.style.width = hitArea.width * wt.a * sx + \"px\";\n        div.style.height = hitArea.height * wt.d * sy + \"px\";\n      } else {\n        hitArea = child.getBounds();\n        this.capHitArea(hitArea);\n        div.style.left = hitArea.x * sx + \"px\";\n        div.style.top = hitArea.y * sy + \"px\";\n        div.style.width = hitArea.width * sx + \"px\";\n        div.style.height = hitArea.height * sy + \"px\"; // update button titles and hints if they exist and they've changed\n\n        if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n          div.title = child.accessibleTitle;\n        }\n\n        if (div.getAttribute('aria-label') !== child.accessibleHint && child.accessibleHint !== null) {\n          div.setAttribute('aria-label', child.accessibleHint);\n        }\n      } // the title or index may have changed, if so lets update it!\n\n\n      if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n        div.title = child.accessibleTitle;\n        div.tabIndex = child.tabIndex;\n\n        if (this.debug) {\n          this.updateDebugHTML(div);\n        }\n      }\n    }\n  } // increment the render id..\n\n\n  this.renderId++;\n};\n/**\n * private function that will visually add the information to the\n * accessability div\n *\n * @param {HTMLDivElement} div\n */\n\n\nAccessibilityManager.prototype.updateDebugHTML = function updateDebugHTML(div) {\n  div.innerHTML = \"type: \" + div.type + \"</br> title : \" + div.title + \"</br> tabIndex: \" + div.tabIndex;\n};\n/**\n * Adjust the hit area based on the bounds of a display object\n *\n * @param {PIXI.Rectangle} hitArea - Bounds of the child\n */\n\n\nAccessibilityManager.prototype.capHitArea = function capHitArea(hitArea) {\n  if (hitArea.x < 0) {\n    hitArea.width += hitArea.x;\n    hitArea.x = 0;\n  }\n\n  if (hitArea.y < 0) {\n    hitArea.height += hitArea.y;\n    hitArea.y = 0;\n  }\n\n  if (hitArea.x + hitArea.width > this.renderer.width) {\n    hitArea.width = this.renderer.width - hitArea.x;\n  }\n\n  if (hitArea.y + hitArea.height > this.renderer.height) {\n    hitArea.height = this.renderer.height - hitArea.y;\n  }\n};\n/**\n * Adds a DisplayObject to the accessibility manager\n *\n * @private\n * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n */\n\n\nAccessibilityManager.prototype.addChild = function addChild(displayObject) {\n  //this.activate();\n  var div = this.pool.pop();\n\n  if (!div) {\n    div = document.createElement('button');\n    div.style.width = DIV_TOUCH_SIZE + \"px\";\n    div.style.height = DIV_TOUCH_SIZE + \"px\";\n    div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n    div.style.position = 'absolute';\n    div.style.zIndex = DIV_TOUCH_ZINDEX;\n    div.style.borderStyle = 'none'; // ARIA attributes ensure that button title and hint updates are announced properly\n\n    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n      // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n      div.setAttribute('aria-live', 'off');\n    } else {\n      div.setAttribute('aria-live', 'polite');\n    }\n\n    if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n      // FireFox needs this to announce only the new button name\n      div.setAttribute('aria-relevant', 'additions');\n    } else {\n      // required by IE, other browsers don't much care\n      div.setAttribute('aria-relevant', 'text');\n    }\n\n    div.addEventListener('click', this._onClick.bind(this));\n    div.addEventListener('focus', this._onFocus.bind(this));\n    div.addEventListener('focusout', this._onFocusOut.bind(this));\n  } // set pointer events\n\n\n  div.style.pointerEvents = displayObject.accessiblePointerEvents; // set the type, this defaults to button!\n\n  div.type = displayObject.accessibleType;\n\n  if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n    div.title = displayObject.accessibleTitle;\n  } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n    div.title = \"displayObject \" + displayObject.tabIndex;\n  }\n\n  if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n    div.setAttribute('aria-label', displayObject.accessibleHint);\n  }\n\n  if (this.debug) {\n    this.updateDebugHTML(div);\n  }\n\n  displayObject._accessibleActive = true;\n  displayObject._accessibleDiv = div;\n  div.displayObject = displayObject;\n  this.children.push(displayObject);\n  this.div.appendChild(displayObject._accessibleDiv);\n  displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n};\n/**\n * Maps the div button press to pixi's InteractionManager (click)\n *\n * @private\n * @param {MouseEvent} e - The click event.\n */\n\n\nAccessibilityManager.prototype._onClick = function _onClick(e) {\n  var interactionManager = this.renderer.plugins.interaction;\n  interactionManager.dispatchEvent(e.target.displayObject, 'click', interactionManager.eventData);\n  interactionManager.dispatchEvent(e.target.displayObject, 'pointertap', interactionManager.eventData);\n  interactionManager.dispatchEvent(e.target.displayObject, 'tap', interactionManager.eventData);\n};\n/**\n * Maps the div focus events to pixi's InteractionManager (mouseover)\n *\n * @private\n * @param {FocusEvent} e - The focus event.\n */\n\n\nAccessibilityManager.prototype._onFocus = function _onFocus(e) {\n  if (!e.target.getAttribute('aria-live', 'off')) {\n    e.target.setAttribute('aria-live', 'assertive');\n  }\n\n  var interactionManager = this.renderer.plugins.interaction;\n  interactionManager.dispatchEvent(e.target.displayObject, 'mouseover', interactionManager.eventData);\n};\n/**\n * Maps the div focus events to pixi's InteractionManager (mouseout)\n *\n * @private\n * @param {FocusEvent} e - The focusout event.\n */\n\n\nAccessibilityManager.prototype._onFocusOut = function _onFocusOut(e) {\n  if (!e.target.getAttribute('aria-live', 'off')) {\n    e.target.setAttribute('aria-live', 'polite');\n  }\n\n  var interactionManager = this.renderer.plugins.interaction;\n  interactionManager.dispatchEvent(e.target.displayObject, 'mouseout', interactionManager.eventData);\n};\n/**\n * Is called when a key is pressed\n *\n * @private\n * @param {KeyboardEvent} e - The keydown event.\n */\n\n\nAccessibilityManager.prototype._onKeyDown = function _onKeyDown(e) {\n  if (e.keyCode !== KEY_CODE_TAB) {\n    return;\n  }\n\n  this.activate();\n};\n/**\n * Is called when the mouse moves across the renderer element\n *\n * @private\n * @param {MouseEvent} e - The mouse event.\n */\n\n\nAccessibilityManager.prototype._onMouseMove = function _onMouseMove(e) {\n  if (e.movementX === 0 && e.movementY === 0) {\n    return;\n  }\n\n  this.deactivate();\n};\n/**\n * Destroys the accessibility manager\n *\n */\n\n\nAccessibilityManager.prototype.destroy = function destroy() {\n  this.destroyTouchHook();\n  this.div = null;\n\n  for (var i = 0; i < this.children.length; i++) {\n    this.children[i].div = null;\n  }\n\n  window.document.removeEventListener('mousemove', this._onMouseMove, true);\n  window.removeEventListener('keydown', this._onKeyDown);\n  this.pool = null;\n  this.children = null;\n  this.renderer = null;\n};\n/**\n * This namespace contains an accessibility plugin for allowing interaction via the keyboard.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @namespace PIXI.accessibility\n */\n\n\nexport { AccessibilityManager, accessibleTarget };","map":null,"metadata":{},"sourceType":"module"}