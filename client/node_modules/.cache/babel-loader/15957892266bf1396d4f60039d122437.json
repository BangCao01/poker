{"ast":null,"code":"var _jsxFileName = \"/Users/bangcao/Desktop/Projects/ts-live-chat-demo-master/client/src/games/Poker.tsx\";\nimport React from 'react'; // import logo from './logo.svg';\n// import './App.css';\n\nimport { ChatContext } from '../ChatContext';\nimport * as PIXI from 'pixi.js';\nimport myImage from '../assets/cards.png';\n\nclass Poker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pixi_cnt = null;\n    this.canvasApp = null;\n    this.avatar = null;\n    this.state = {\n      app: null\n    };\n\n    this.updatePixiCnt = element => {\n      // the element is the DOM object that we will use as container to add pixi stage(canvas)\n      this.pixi_cnt = element; //now we are adding the application to the DOM element which we got from the Ref.\n\n      if (this.pixi_cnt && this.pixi_cnt.children.length <= 0 && this.canvasApp !== null) {\n        this.pixi_cnt.appendChild(this.canvasApp.view); //The setup function is a custom function that we created to add the sprites. We will this below\n\n        this.setup();\n      }\n\n      console.log('kkk');\n    };\n\n    this.setup = () => {\n      PIXI.Loader.shared.add(\"avatar\", myImage).load(this.initialize);\n    };\n\n    this.initialize = () => {\n      //We will create a sprite and then add it to stage and (0,0) position\n      this.avatar = new PIXI.Sprite(PIXI.Loader.shared.resources[\"avatar\"].texture);\n      this.state.app.stage.addChild(this.avatar);\n    };\n\n    this.pixi_cnt = null;\n  }\n\n  componentDidMount() {\n    //initiate socket connection\n    this.context.init();\n    const observable = this.context.onMessage();\n    observable.subscribe(m => {\n      let messages = this.state.messages;\n      messages.push(m);\n      this.setState({\n        messages: messages\n      });\n    });\n    this.canvasApp = new PIXI.Application({\n      width: 600,\n      height: 600,\n      transparent: false\n    });\n    this.setState({\n      app: this.canvasApp\n    }); // .appendChild(this.canvasApp);\n  }\n\n  componentWillUnmount() {\n    this.context.disconnect();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: this.updatePixiCnt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  }\n\n}\n\nPoker.contextType = ChatContext;\nexport default Poker;","map":{"version":3,"sources":["/Users/bangcao/Desktop/Projects/ts-live-chat-demo-master/client/src/games/Poker.tsx"],"names":["React","ChatContext","PIXI","myImage","Poker","Component","constructor","props","pixi_cnt","canvasApp","avatar","state","app","updatePixiCnt","element","children","length","appendChild","view","setup","console","log","Loader","shared","add","load","initialize","Sprite","resources","texture","stage","addChild","componentDidMount","context","init","observable","onMessage","subscribe","m","messages","push","setState","Application","width","height","transparent","componentWillUnmount","disconnect","render","contextType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAoC;AAMlCC,EAAAA,WAAW,CAACC,KAAD,EAAY;AACrB,UAAMA,KAAN;AADqB,SAJhBC,QAIgB,GAJD,IAIC;AAAA,SAHhBC,SAGgB,GAHA,IAGA;AAAA,SAFhBC,MAEgB,GAFF,IAEE;AAAA,SADhBC,KACgB,GADH;AAACC,MAAAA,GAAG,EAAE;AAAN,KACG;;AAAA,SAgCvBC,aAhCuB,GAgCPC,OAAD,IAAiB;AAC9B;AACA,WAAKN,QAAL,GAAgBM,OAAhB,CAF8B,CAG9B;;AACA,UAAG,KAAKN,QAAL,IAAiB,KAAKA,QAAL,CAAcO,QAAd,CAAuBC,MAAvB,IAA+B,CAAhD,IAAqD,KAAKP,SAAL,KAAmB,IAA3E,EAAiF;AAC9E,aAAKD,QAAL,CAAcS,WAAd,CAA0B,KAAKR,SAAL,CAAeS,IAAzC,EAD8E,CAE9E;;AACA,aAAKC,KAAL;AACF;;AAEDC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAEF,KA5CuB;;AAAA,SA8CxBF,KA9CwB,GA8ChB,MAAM;AACbjB,MAAAA,IAAI,CAACoB,MAAL,CAAYC,MAAZ,CAAmBC,GAAnB,CAAuB,QAAvB,EAAgCrB,OAAhC,EACMsB,IADN,CACW,KAAKC,UADhB;AAED,KAjDwB;;AAAA,SAkDzBA,UAlDyB,GAkDZ,MAAM;AAChB;AACA,WAAKhB,MAAL,GAAc,IAAIR,IAAI,CAACyB,MAAT,CAAgBzB,IAAI,CAACoB,MAAL,CAAYC,MAAZ,CAAmBK,SAAnB,CAA6B,QAA7B,EAAuCC,OAAvD,CAAd;AACA,WAAKlB,KAAL,CAAWC,GAAX,CAAekB,KAAf,CAAqBC,QAArB,CAA8B,KAAKrB,MAAnC;AAEF,KAvDwB;;AAErB,SAAKF,QAAL,GAAgB,IAAhB;AAGD;;AAEDwB,EAAAA,iBAAiB,GAAI;AAEnB;AACA,SAAKC,OAAL,CAAaC,IAAb;AAEA,UAAMC,UAAU,GAAG,KAAKF,OAAL,CAAaG,SAAb,EAAnB;AAEAD,IAAAA,UAAU,CAACE,SAAX,CAAsBC,CAAD,IAAoB;AACvC,UAAIC,QAAQ,GAAG,KAAK5B,KAAL,CAAW4B,QAA1B;AAEAA,MAAAA,QAAQ,CAACC,IAAT,CAAcF,CAAd;AACA,WAAKG,QAAL,CAAc;AAAEF,QAAAA,QAAQ,EAAEA;AAAZ,OAAd;AACD,KALD;AAOA,SAAK9B,SAAL,GAAiB,IAAIP,IAAI,CAACwC,WAAT,CAAqB;AAACC,MAAAA,KAAK,EAAE,GAAR;AAAaC,MAAAA,MAAM,EAAE,GAArB;AAA0BC,MAAAA,WAAW,EAAC;AAAtC,KAArB,CAAjB;AAEA,SAAKJ,QAAL,CAAc;AAAC7B,MAAAA,GAAG,EAAC,KAAKH;AAAV,KAAd,EAhBmB,CAkBnB;AACD;;AAEDqC,EAAAA,oBAAoB,GAAI;AACtB,SAAKb,OAAL,CAAac,UAAb;AACD;;AA2BHC,EAAAA,MAAM,GAAG;AACL,WAAO;AAAK,MAAA,GAAG,EAAE,KAAKnC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAjEiC;;AAA9BT,K,CACG6C,W,GAAchD,W;AAmEvB,eAAeG,KAAf","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport { ChatMessage, ChatState } from '../types';\nimport { ChatContext } from '../ChatContext';\nimport * as PIXI from 'pixi.js';\nimport myImage from '../assets/cards.png';\n\nclass Poker extends React.Component {\n  static contextType = ChatContext;\n  public pixi_cnt:any = null;\n  public canvasApp:any = null;\n  public avatar: any = null;\n  public state: any = {app: null}\n  constructor(props:any) {\n    super(props);\n    this.pixi_cnt = null;\n\n\n  }\n\n  componentDidMount () {\n\n    //initiate socket connection\n    this.context.init();\n\n    const observable = this.context.onMessage();\n\n    observable.subscribe((m: ChatMessage) => {\n      let messages = this.state.messages;\n\n      messages.push(m);\n      this.setState({ messages: messages });\n    });\n\n    this.canvasApp = new PIXI.Application({width: 600, height: 600, transparent:false})\n    \n    this.setState({app:this.canvasApp});\n     \n    // .appendChild(this.canvasApp);\n  }\n\n  componentWillUnmount () {\n    this.context.disconnect();\n  }\n\n  updatePixiCnt= (element:any) => {\n    // the element is the DOM object that we will use as container to add pixi stage(canvas)\n    this.pixi_cnt = element;\n    //now we are adding the application to the DOM element which we got from the Ref.\n    if(this.pixi_cnt && this.pixi_cnt.children.length<=0 && this.canvasApp !== null) {\n       this.pixi_cnt.appendChild(this.canvasApp.view);\n       //The setup function is a custom function that we created to add the sprites. We will this below\n       this.setup();\n    }\n\n    console.log('kkk');\n\n };\n\n setup = () => {\n  PIXI.Loader.shared.add(\"avatar\",myImage)\n       .load(this.initialize);\n};\ninitialize = () => {\n   //We will create a sprite and then add it to stage and (0,0) position\n   this.avatar = new PIXI.Sprite(PIXI.Loader.shared.resources[\"avatar\"].texture);\n   this.state.app.stage.addChild(this.avatar);\n\n};\n  \nrender() {\n    return <div ref={this.updatePixiCnt} />;\n  }\n}\n\nexport default Poker;\n"]},"metadata":{},"sourceType":"module"}