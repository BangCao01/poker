{"ast":null,"code":"var _jsxFileName = \"/Users/bangcao/Desktop/Projects/ts-live-chat-demo-master/client/src/games/Poker.tsx\";\nimport React from 'react'; // import logo from './logo.svg';\n// import './App.css';\n\nimport { ChatContext } from '../ChatContext';\nimport * as PIXI from 'pixi.js';\nimport myImage from '../assets/cards.png';\n\nclass Poker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pixi_cnt = null;\n    this.canvasApp = null;\n    this.avatar = null;\n    this.state = {\n      app: null\n    };\n\n    this.updatePixiCnt = element => {\n      // the element is the DOM object that we will use as container to add pixi stage(canvas)\n      //now we are adding the application to the DOM element which we got from the Ref.\n      if (this.pixi_cnt === null && this.canvasApp !== null) {\n        this.pixi_cnt = element;\n        this.pixi_cnt.appendChild(this.canvasApp.view); //The setup function is a custom function that we created to add the sprites. We will this below\n\n        this.setup();\n      }\n\n      console.log('kkk');\n    };\n\n    this.setup = () => {\n      PIXI.Loader.shared.add(\"avatar\", myImage).load(this.initialize);\n    };\n\n    this.initialize = () => {\n      //We will create a sprite and then add it to stage and (0,0) position\n      this.avatar = new PIXI.Sprite(PIXI.Loader.shared.resources[\"avatar\"].texture);\n      this.state.app.stage.addChild(this.avatar);\n    };\n\n    this.pixi_cnt = null;\n  }\n\n  componentDidMount() {\n    //initiate socket connection\n    this.context.init();\n    const observable = this.context.onMessage();\n    observable.subscribe(m => {\n      let messages = this.state.messages;\n      messages.push(m);\n      this.setState({\n        messages: messages\n      });\n    });\n    this.canvasApp = new PIXI.Application({\n      width: 600,\n      height: 600,\n      transparent: false\n    });\n    this.setState({\n      app: this.canvasApp\n    });\n    const canvas = document.getElementById('canvas');\n    if (canvas !== null) canvas.appendChild(this.canvasApp.view); // create a new Sprite from an image path\n\n    const bunny = PIXI.Sprite.from('../assets/cards.png'); // center the sprite's anchor point\n\n    bunny.anchor.set(0.5); // move the sprite to the center of the screen\n\n    bunny.x = this.canvasApp.screen.width / 2;\n    bunny.y = this.canvasApp.screen.height / 2;\n    this.canvasApp.stage.addChild(bunny); // Listen for animate update\n\n    this.canvasApp.ticker.add(delta => {\n      // just for fun, let's rotate mr rabbit a little\n      // delta is 1 if running at 100% performance\n      // creates frame-independent transformation\n      bunny.rotation += 0.1 * delta;\n      console.log('lll');\n    });\n  }\n\n  componentWillUnmount() {\n    this.context.disconnect();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    });\n  }\n\n}\n\nPoker.contextType = ChatContext;\nexport default Poker;","map":{"version":3,"sources":["/Users/bangcao/Desktop/Projects/ts-live-chat-demo-master/client/src/games/Poker.tsx"],"names":["React","ChatContext","PIXI","myImage","Poker","Component","constructor","props","pixi_cnt","canvasApp","avatar","state","app","updatePixiCnt","element","appendChild","view","setup","console","log","Loader","shared","add","load","initialize","Sprite","resources","texture","stage","addChild","componentDidMount","context","init","observable","onMessage","subscribe","m","messages","push","setState","Application","width","height","transparent","canvas","document","getElementById","bunny","from","anchor","set","x","screen","y","ticker","delta","rotation","componentWillUnmount","disconnect","render","contextType"],"mappings":"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","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport { ChatMessage, ChatState } from '../types';\nimport { ChatContext } from '../ChatContext';\nimport * as PIXI from 'pixi.js';\nimport myImage from '../assets/cards.png';\n\nclass Poker extends React.Component {\n  static contextType = ChatContext;\n  public pixi_cnt:any = null;\n  public canvasApp:any = null;\n  public avatar: any = null;\n  public state: any = {app: null}\n  constructor(props:any) {\n    super(props);\n    this.pixi_cnt = null;\n\n\n  }\n\n  componentDidMount () {\n\n    //initiate socket connection\n    this.context.init();\n\n    const observable = this.context.onMessage();\n\n    observable.subscribe((m: ChatMessage) => {\n      let messages = this.state.messages;\n\n      messages.push(m);\n      this.setState({ messages: messages });\n    });\n\n    this.canvasApp = new PIXI.Application({width: 600, height: 600, transparent:false})\n    \n    this.setState({app:this.canvasApp});\n     \n    const canvas = document.getElementById('canvas');\n    \n    \n    if(canvas !== null) \n    canvas.appendChild(this.canvasApp.view);\n\n    // create a new Sprite from an image path\n      const bunny = PIXI.Sprite.from('../assets/cards.png');\n\n      // center the sprite's anchor point\n      bunny.anchor.set(0.5);\n\n      // move the sprite to the center of the screen\n      bunny.x = this.canvasApp.screen.width / 2;\n      bunny.y = this.canvasApp.screen.height / 2;\n\n      this.canvasApp.stage.addChild(bunny);\n\n      // Listen for animate update\n      this.canvasApp.ticker.add((delta:any) => {\n          // just for fun, let's rotate mr rabbit a little\n          // delta is 1 if running at 100% performance\n          // creates frame-independent transformation\n          bunny.rotation += 0.1 * delta;\n          console.log('lll');\n      });\n  }\n\n  componentWillUnmount () {\n    this.context.disconnect();\n  }\n\n  updatePixiCnt= (element:any) => {\n    // the element is the DOM object that we will use as container to add pixi stage(canvas)\n    \n    //now we are adding the application to the DOM element which we got from the Ref.\n    if(this.pixi_cnt === null && this.canvasApp !== null) {\n      this.pixi_cnt = element;\n       this.pixi_cnt.appendChild(this.canvasApp.view);\n       //The setup function is a custom function that we created to add the sprites. We will this below\n       this.setup();\n    }\n\n    console.log('kkk');\n\n };\n\n setup = () => {\n  PIXI.Loader.shared.add(\"avatar\",myImage)\n       .load(this.initialize);\n};\ninitialize = () => {\n   //We will create a sprite and then add it to stage and (0,0) position\n   this.avatar = new PIXI.Sprite(PIXI.Loader.shared.resources[\"avatar\"].texture);\n   this.state.app.stage.addChild(this.avatar);\n\n};\n  \nrender() {\n    return <div id='canvas'/>;\n  }\n}\n\nexport default Poker;\n"]},"metadata":{},"sourceType":"module"}