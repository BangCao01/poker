{"ast":null,"code":"var _jsxFileName = \"/Users/bangcao/Desktop/Projects/ts-live-chat-demo-master/client/src/games/Poker.tsx\";\nimport React from 'react'; // import logo from './logo.svg';\n// import './App.css';\n\nimport { ChatContext } from '../ChatContext';\nimport * as PIXI from 'pixi.js';\nimport myImage from '../assets/cards.png';\nimport Game from './Game';\n\nclass Poker extends Game {\n  constructor(props) {\n    super(props);\n    this.bunny = null;\n    this.state = {\n      app: null\n    };\n  }\n\n  componentDidMount() {\n    //initiate socket connection\n    this.context.init();\n    const observable = this.context.onMessage();\n    observable.subscribe(m => {\n      let messages = this.state.messages;\n      messages.push(m);\n      this.setState({\n        messages: messages\n      });\n    });\n    this.canvasApp = new PIXI.Application({\n      width: 1000,\n      height: 1000,\n      transparent: false,\n      backgroundColor: 0x1099bb\n    });\n    this.setState({\n      app: this.canvasApp\n    });\n    const canvas = document.getElementById('canvas');\n    if (canvas !== null) canvas.appendChild(this.canvasApp.view); // Listen for animate update\n\n    this.canvasApp.ticker.add(delta => {\n      bunny.rotation += 0.1 * delta;\n    });\n  }\n\n  Init() {\n    this.bunny = PIXI.Sprite.from(myImage); // center the sprite's anchor point\n\n    if (this.bunny !== null) console.log('BBBBBBB');\n    this.bunny.anchor.set(0.5); // move the sprite to the center of the screen\n\n    this.bunny.x = this.canvasApp.app.width / 2;\n    this.bunny.y = this.canvasApp.app.height / 2;\n    this.canvasApp.stage.addChild(this.bunny);\n  }\n\n  Update(delta) {\n    this.bunny.rotation += 0.1 * delta;\n  }\n\n  componentWillUnmount() {\n    this.context.disconnect();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    });\n  }\n\n}\n\nPoker.contextType = ChatContext;\nexport default Poker;","map":{"version":3,"sources":["/Users/bangcao/Desktop/Projects/ts-live-chat-demo-master/client/src/games/Poker.tsx"],"names":["React","ChatContext","PIXI","myImage","Game","Poker","constructor","props","bunny","state","app","componentDidMount","context","init","observable","onMessage","subscribe","m","messages","push","setState","canvasApp","Application","width","height","transparent","backgroundColor","canvas","document","getElementById","appendChild","view","ticker","add","delta","rotation","Init","Sprite","from","console","log","anchor","set","x","y","stage","addChild","Update","componentWillUnmount","disconnect","render","contextType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,KAAN,SAAoBD,IAApB,CAAyB;AAIvBE,EAAAA,WAAW,CAACC,KAAD,EAAY;AACrB,UAAMA,KAAN;AADqB,SAFhBC,KAEgB,GAFH,IAEG;AAAA,SADhBC,KACgB,GADH;AAACC,MAAAA,GAAG,EAAE;AAAN,KACG;AAGtB;;AAEDC,EAAAA,iBAAiB,GAAI;AAEnB;AACA,SAAKC,OAAL,CAAaC,IAAb;AAEA,UAAMC,UAAU,GAAG,KAAKF,OAAL,CAAaG,SAAb,EAAnB;AAEAD,IAAAA,UAAU,CAACE,SAAX,CAAsBC,CAAD,IAAoB;AACvC,UAAIC,QAAQ,GAAG,KAAKT,KAAL,CAAWS,QAA1B;AAEAA,MAAAA,QAAQ,CAACC,IAAT,CAAcF,CAAd;AACA,WAAKG,QAAL,CAAc;AAAEF,QAAAA,QAAQ,EAAEA;AAAZ,OAAd;AACD,KALD;AAOA,SAAKG,SAAL,GAAiB,IAAInB,IAAI,CAACoB,WAAT,CAAqB;AAACC,MAAAA,KAAK,EAAE,IAAR;AAAcC,MAAAA,MAAM,EAAE,IAAtB;AAA4BC,MAAAA,WAAW,EAAC,KAAxC;AAA+CC,MAAAA,eAAe,EAAE;AAAhE,KAArB,CAAjB;AAEA,SAAKN,QAAL,CAAc;AAACV,MAAAA,GAAG,EAAC,KAAKW;AAAV,KAAd;AAEA,UAAMM,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AAGA,QAAGF,MAAM,KAAK,IAAd,EACAA,MAAM,CAACG,WAAP,CAAmB,KAAKT,SAAL,CAAeU,IAAlC,EAtBmB,CAyBjB;;AACA,SAAKV,SAAL,CAAeW,MAAf,CAAsBC,GAAtB,CAA2BC,KAAD,IAAe;AACrC1B,MAAAA,KAAK,CAAC2B,QAAN,IAAkB,MAAMD,KAAxB;AAEH,KAHD;AAOH;;AACME,EAAAA,IAAP,GACA;AACE,SAAK5B,KAAL,GAAaN,IAAI,CAACmC,MAAL,CAAYC,IAAZ,CAAiBnC,OAAjB,CAAb,CADF,CAGE;;AACA,QAAG,KAAKK,KAAL,KAAe,IAAlB,EACA+B,OAAO,CAACC,GAAR,CAAY,SAAZ;AAEA,SAAKhC,KAAL,CAAWiC,MAAX,CAAkBC,GAAlB,CAAsB,GAAtB,EAPF,CASE;;AACA,SAAKlC,KAAL,CAAWmC,CAAX,GAAe,KAAKtB,SAAL,CAAeX,GAAf,CAAmBa,KAAnB,GAAyB,CAAxC;AACA,SAAKf,KAAL,CAAWoC,CAAX,GAAe,KAAKvB,SAAL,CAAeX,GAAf,CAAmBc,MAAnB,GAA0B,CAAzC;AAEA,SAAKH,SAAL,CAAewB,KAAf,CAAqBC,QAArB,CAA8B,KAAKtC,KAAnC;AACD;;AAEMuC,EAAAA,MAAP,CAAcb,KAAd,EACA;AACE,SAAK1B,KAAL,CAAW2B,QAAX,IAAuB,MAAMD,KAA7B;AACD;;AAEDc,EAAAA,oBAAoB,GAAI;AACtB,SAAKpC,OAAL,CAAaqC,UAAb;AACD;;AAEHC,EAAAA,MAAM,GAAG;AACL,WAAO;AAAK,MAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAvEsB;;AAAnB7C,K,CACG8C,W,GAAclD,W;AAyEvB,eAAeI,KAAf","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport { ChatMessage, ChatState } from '../types';\nimport { ChatContext } from '../ChatContext';\nimport * as PIXI from 'pixi.js';\nimport myImage from '../assets/cards.png';\nimport Game from './Game';\n\nclass Poker extends Game {\n  static contextType = ChatContext;\n  public bunny: any = null;\n  public state: any = {app: null}\n  constructor(props:any) {\n    super(props);\n    \n  }\n\n  componentDidMount () {\n\n    //initiate socket connection\n    this.context.init();\n\n    const observable = this.context.onMessage();\n\n    observable.subscribe((m: ChatMessage) => {\n      let messages = this.state.messages;\n\n      messages.push(m);\n      this.setState({ messages: messages });\n    });\n\n    this.canvasApp = new PIXI.Application({width: 1000, height: 1000, transparent:false, backgroundColor: 0x1099bb})\n    \n    this.setState({app:this.canvasApp});\n     \n    const canvas = document.getElementById('canvas');\n    \n    \n    if(canvas !== null) \n    canvas.appendChild(this.canvasApp.view);\n\n    \n      // Listen for animate update\n      this.canvasApp.ticker.add((delta:any) => {\n          bunny.rotation += 0.1 * delta;\n          \n      });\n\n     \n      \n  }\n  public Init()\n  {\n    this.bunny = PIXI.Sprite.from(myImage);\n\n    // center the sprite's anchor point\n    if(this.bunny !== null)\n    console.log('BBBBBBB');\n\n    this.bunny.anchor.set(0.5);\n\n    // move the sprite to the center of the screen\n    this.bunny.x = this.canvasApp.app.width/2;\n    this.bunny.y = this.canvasApp.app.height/2;\n\n    this.canvasApp.stage.addChild(this.bunny);\n  }\n\n  public Update(delta:any)\n  {\n    this.bunny.rotation += 0.1 * delta;\n  }\n\n  componentWillUnmount () {\n    this.context.disconnect();\n  }\n\nrender() {\n    return <div id='canvas'/>;\n  }\n}\n\nexport default Poker;\n"]},"metadata":{},"sourceType":"module"}