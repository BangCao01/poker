{"ast":null,"code":"/*!\n * @pixi/mesh-extras - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/mesh-extras is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { MeshGeometry, Mesh, MeshMaterial } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\n\nvar PlaneGeometry = /*@__PURE__*/function (MeshGeometry) {\n  function PlaneGeometry(width, height, segWidth, segHeight) {\n    if (width === void 0) width = 100;\n    if (height === void 0) height = 100;\n    if (segWidth === void 0) segWidth = 10;\n    if (segHeight === void 0) segHeight = 10;\n    MeshGeometry.call(this);\n    this.segWidth = segWidth;\n    this.segHeight = segHeight;\n    this.width = width;\n    this.height = height;\n    this.build();\n  }\n\n  if (MeshGeometry) PlaneGeometry.__proto__ = MeshGeometry;\n  PlaneGeometry.prototype = Object.create(MeshGeometry && MeshGeometry.prototype);\n  PlaneGeometry.prototype.constructor = PlaneGeometry;\n  /**\n   * Refreshes plane coordinates\n   * @private\n   */\n\n  PlaneGeometry.prototype.build = function build() {\n    var total = this.segWidth * this.segHeight;\n    var verts = [];\n    var uvs = [];\n    var indices = [];\n    var segmentsX = this.segWidth - 1;\n    var segmentsY = this.segHeight - 1;\n    var sizeX = this.width / segmentsX;\n    var sizeY = this.height / segmentsY;\n\n    for (var i = 0; i < total; i++) {\n      var x = i % this.segWidth;\n      var y = i / this.segWidth | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / segmentsX, y / segmentsY);\n    }\n\n    var totalSub = segmentsX * segmentsY;\n\n    for (var i$1 = 0; i$1 < totalSub; i$1++) {\n      var xpos = i$1 % segmentsX;\n      var ypos = i$1 / segmentsX | 0;\n      var value = ypos * this.segWidth + xpos;\n      var value2 = ypos * this.segWidth + xpos + 1;\n      var value3 = (ypos + 1) * this.segWidth + xpos;\n      var value4 = (ypos + 1) * this.segWidth + xpos + 1;\n      indices.push(value, value2, value3, value2, value4, value3);\n    }\n\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint16Array(indices); // ensure that the changes are uploaded\n\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  };\n\n  return PlaneGeometry;\n}(MeshGeometry);\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @class\n * @extends PIXI.MeshGeometry\n * @memberof PIXI\n *\n */\n\n\nvar RopeGeometry = /*@__PURE__*/function (MeshGeometry) {\n  function RopeGeometry(width, points, textureScale) {\n    if (width === void 0) width = 200;\n    if (textureScale === void 0) textureScale = 0;\n    MeshGeometry.call(this, new Float32Array(points.length * 4), new Float32Array(points.length * 4), new Uint16Array((points.length - 1) * 6));\n    /**\n     * An array of points that determine the rope\n     * @member {PIXI.Point[]}\n     */\n\n    this.points = points;\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @member {number}\n     * @readOnly\n     */\n\n    this.width = width;\n    /**\n     * Rope texture scale, if zero then the rope texture is stretched.\n     * @member {number}\n     * @readOnly\n     */\n\n    this.textureScale = textureScale;\n    this.build();\n  }\n\n  if (MeshGeometry) RopeGeometry.__proto__ = MeshGeometry;\n  RopeGeometry.prototype = Object.create(MeshGeometry && MeshGeometry.prototype);\n  RopeGeometry.prototype.constructor = RopeGeometry;\n  /**\n   * Refreshes Rope indices and uvs\n   * @private\n   */\n\n  RopeGeometry.prototype.build = function build() {\n    var points = this.points;\n\n    if (!points) {\n      return;\n    }\n\n    var vertexBuffer = this.getBuffer('aVertexPosition');\n    var uvBuffer = this.getBuffer('aTextureCoord');\n    var indexBuffer = this.getIndex(); // if too little points, or texture hasn't got UVs set yet just move on.\n\n    if (points.length < 1) {\n      return;\n    } // if the number of points has changed we will need to recreate the arraybuffers\n\n\n    if (vertexBuffer.data.length / 4 !== points.length) {\n      vertexBuffer.data = new Float32Array(points.length * 4);\n      uvBuffer.data = new Float32Array(points.length * 4);\n      indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n    }\n\n    var uvs = uvBuffer.data;\n    var indices = indexBuffer.data;\n    uvs[0] = 0;\n    uvs[1] = 0;\n    uvs[2] = 0;\n    uvs[3] = 1;\n    var amount = 0;\n    var prev = points[0];\n    var textureWidth = this.width * this.textureScale;\n    var total = points.length; // - 1;\n\n    for (var i = 0; i < total; i++) {\n      // time to do some smart drawing!\n      var index = i * 4;\n\n      if (this.textureScale > 0) {\n        // calculate pixel distance from previous point\n        var dx = prev.x - points[i].x;\n        var dy = prev.y - points[i].y;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        prev = points[i];\n        amount += distance / textureWidth;\n      } else {\n        // stretch texture\n        amount = i / (total - 1);\n      }\n\n      uvs[index] = amount;\n      uvs[index + 1] = 0;\n      uvs[index + 2] = amount;\n      uvs[index + 3] = 1;\n    }\n\n    var indexCount = 0;\n\n    for (var i$1 = 0; i$1 < total - 1; i$1++) {\n      var index$1 = i$1 * 2;\n      indices[indexCount++] = index$1;\n      indices[indexCount++] = index$1 + 1;\n      indices[indexCount++] = index$1 + 2;\n      indices[indexCount++] = index$1 + 2;\n      indices[indexCount++] = index$1 + 1;\n      indices[indexCount++] = index$1 + 3;\n    } // ensure that the changes are uploaded\n\n\n    uvBuffer.update();\n    indexBuffer.update();\n    this.updateVertices();\n  };\n  /**\n   * refreshes vertices of Rope mesh\n   */\n\n\n  RopeGeometry.prototype.updateVertices = function updateVertices() {\n    var points = this.points;\n\n    if (points.length < 1) {\n      return;\n    }\n\n    var lastPoint = points[0];\n    var nextPoint;\n    var perpX = 0;\n    var perpY = 0;\n    var vertices = this.buffers[0].data;\n    var total = points.length;\n\n    for (var i = 0; i < total; i++) {\n      var point = points[i];\n      var index = i * 4;\n\n      if (i < points.length - 1) {\n        nextPoint = points[i + 1];\n      } else {\n        nextPoint = point;\n      }\n\n      perpY = -(nextPoint.x - lastPoint.x);\n      perpX = nextPoint.y - lastPoint.y;\n      var perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n      var num = this.textureScale > 0 ? this.textureScale * this.width / 2 : this.width / 2;\n      perpX /= perpLength;\n      perpY /= perpLength;\n      perpX *= num;\n      perpY *= num;\n      vertices[index] = point.x + perpX;\n      vertices[index + 1] = point.y + perpY;\n      vertices[index + 2] = point.x - perpX;\n      vertices[index + 3] = point.y - perpY;\n      lastPoint = point;\n    }\n\n    this.buffers[0].update();\n  };\n\n  RopeGeometry.prototype.update = function update() {\n    if (this.textureScale > 0) {\n      this.build(); // we need to update UVs\n    } else {\n      this.updateVertices();\n    }\n  };\n\n  return RopeGeometry;\n}(MeshGeometry);\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\n\n\nvar SimpleRope = /*@__PURE__*/function (Mesh) {\n  function SimpleRope(texture, points, textureScale) {\n    if (textureScale === void 0) textureScale = 0;\n    var ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n    var meshMaterial = new MeshMaterial(texture);\n\n    if (textureScale > 0) {\n      // attempt to set UV wrapping, will fail on non-power of two textures\n      texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n    }\n\n    Mesh.call(this, ropeGeometry, meshMaterial);\n    /**\n     * re-calculate vertices by rope points each frame\n     *\n     * @member {boolean}\n     */\n\n    this.autoUpdate = true;\n  }\n\n  if (Mesh) SimpleRope.__proto__ = Mesh;\n  SimpleRope.prototype = Object.create(Mesh && Mesh.prototype);\n  SimpleRope.prototype.constructor = SimpleRope;\n\n  SimpleRope.prototype._render = function _render(renderer) {\n    if (this.autoUpdate || this.geometry.width !== this.shader.texture.height) {\n      this.geometry.width = this.shader.texture.height;\n      this.geometry.update();\n    }\n\n    Mesh.prototype._render.call(this, renderer);\n  };\n\n  return SimpleRope;\n}(Mesh);\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\n\n\nvar SimplePlane = /*@__PURE__*/function (Mesh) {\n  function SimplePlane(texture, verticesX, verticesY) {\n    var planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n    var meshMaterial = new MeshMaterial(Texture.WHITE);\n    Mesh.call(this, planeGeometry, meshMaterial); // lets call the setter to ensure all necessary updates are performed\n\n    this.texture = texture;\n  }\n\n  if (Mesh) SimplePlane.__proto__ = Mesh;\n  SimplePlane.prototype = Object.create(Mesh && Mesh.prototype);\n  SimplePlane.prototype.constructor = SimplePlane;\n  var prototypeAccessors = {\n    texture: {\n      configurable: true\n    }\n  };\n  /**\n   * Method used for overrides, to do something in case texture frame was changed.\n   * Meshes based on plane can override it and change more details based on texture.\n   */\n\n  SimplePlane.prototype.textureUpdated = function textureUpdated() {\n    this._textureID = this.shader.texture._updateID;\n    this.geometry.width = this.shader.texture.width;\n    this.geometry.height = this.shader.texture.height;\n    this.geometry.build();\n  };\n\n  prototypeAccessors.texture.set = function (value) {\n    // Track texture same way sprite does.\n    // For generated meshes like NineSlicePlane it can change the geometry.\n    // Unfortunately, this method might not work if you directly change texture in material.\n    if (this.shader.texture === value) {\n      return;\n    }\n\n    this.shader.texture = value;\n    this._textureID = -1;\n\n    if (value.baseTexture.valid) {\n      this.textureUpdated();\n    } else {\n      value.once('update', this.textureUpdated, this);\n    }\n  };\n\n  prototypeAccessors.texture.get = function () {\n    return this.shader.texture;\n  };\n\n  SimplePlane.prototype._render = function _render(renderer) {\n    if (this._textureID !== this.shader.texture._updateID) {\n      this.textureUpdated();\n    }\n\n    Mesh.prototype._render.call(this, renderer);\n  };\n\n  Object.defineProperties(SimplePlane.prototype, prototypeAccessors);\n  return SimplePlane;\n}(Mesh);\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n */\n\n\nvar SimpleMesh = /*@__PURE__*/function (Mesh) {\n  function SimpleMesh(texture, vertices, uvs, indices, drawMode) {\n    if (texture === void 0) texture = Texture.EMPTY;\n    var geometry = new MeshGeometry(vertices, uvs, indices);\n    geometry.getBuffer('aVertexPosition').static = false;\n    var meshMaterial = new MeshMaterial(texture);\n    Mesh.call(this, geometry, meshMaterial, null, drawMode);\n    /**\n     * upload vertices buffer each frame\n     * @member {boolean}\n     */\n\n    this.autoUpdate = true;\n  }\n\n  if (Mesh) SimpleMesh.__proto__ = Mesh;\n  SimpleMesh.prototype = Object.create(Mesh && Mesh.prototype);\n  SimpleMesh.prototype.constructor = SimpleMesh;\n  var prototypeAccessors = {\n    vertices: {\n      configurable: true\n    }\n  };\n  /**\n   * Collection of vertices data.\n   * @member {Float32Array}\n   */\n\n  prototypeAccessors.vertices.get = function () {\n    return this.geometry.getBuffer('aVertexPosition').data;\n  };\n\n  prototypeAccessors.vertices.set = function (value) {\n    this.geometry.getBuffer('aVertexPosition').data = value;\n  };\n\n  SimpleMesh.prototype._render = function _render(renderer) {\n    if (this.autoUpdate) {\n      this.geometry.getBuffer('aVertexPosition').update();\n    }\n\n    Mesh.prototype._render.call(this, renderer);\n  };\n\n  Object.defineProperties(SimpleMesh.prototype, prototypeAccessors);\n  return SimpleMesh;\n}(Mesh);\n\nvar DEFAULT_BORDER_SIZE = 10;\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.SimplePlane\n * @memberof PIXI\n *\n */\n\nvar NineSlicePlane = /*@__PURE__*/function (SimplePlane) {\n  function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    SimplePlane.call(this, Texture.WHITE, 4, 4);\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     * @override\n     */\n\n    this._width = this._origWidth;\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     * @override\n     */\n\n    this._height = this._origHeight;\n    /**\n     * The width of the left column (a)\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;\n    /**\n     * The width of the right column (b)\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;\n    /**\n     * The height of the top row (c)\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;\n    /**\n     * The height of the bottom row (d)\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE; // lets call the setter to ensure all necessary updates are performed\n\n    this.texture = texture;\n  }\n\n  if (SimplePlane) NineSlicePlane.__proto__ = SimplePlane;\n  NineSlicePlane.prototype = Object.create(SimplePlane && SimplePlane.prototype);\n  NineSlicePlane.prototype.constructor = NineSlicePlane;\n  var prototypeAccessors = {\n    vertices: {\n      configurable: true\n    },\n    width: {\n      configurable: true\n    },\n    height: {\n      configurable: true\n    },\n    leftWidth: {\n      configurable: true\n    },\n    rightWidth: {\n      configurable: true\n    },\n    topHeight: {\n      configurable: true\n    },\n    bottomHeight: {\n      configurable: true\n    }\n  };\n\n  NineSlicePlane.prototype.textureUpdated = function textureUpdated() {\n    this._textureID = this.shader.texture._updateID;\n\n    this._refresh();\n  };\n\n  prototypeAccessors.vertices.get = function () {\n    return this.geometry.getBuffer('aVertexPosition').data;\n  };\n\n  prototypeAccessors.vertices.set = function (value) {\n    this.geometry.getBuffer('aVertexPosition').data = value;\n  };\n  /**\n   * Updates the horizontal vertices.\n   *\n   */\n\n\n  NineSlicePlane.prototype.updateHorizontalVertices = function updateHorizontalVertices() {\n    var vertices = this.vertices;\n\n    var scale = this._getMinScale();\n\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n    vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n    vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  };\n  /**\n   * Updates the vertical vertices.\n   *\n   */\n\n\n  NineSlicePlane.prototype.updateVerticalVertices = function updateVerticalVertices() {\n    var vertices = this.vertices;\n\n    var scale = this._getMinScale();\n\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n    vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n    vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  };\n  /**\n   * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n   *\n   * @return {number} Smaller number of vertical and horizontal scale.\n   * @private\n   */\n\n\n  NineSlicePlane.prototype._getMinScale = function _getMinScale() {\n    var w = this._leftWidth + this._rightWidth;\n    var scaleW = this._width > w ? 1.0 : this._width / w;\n    var h = this._topHeight + this._bottomHeight;\n    var scaleH = this._height > h ? 1.0 : this._height / h;\n    var scale = Math.min(scaleW, scaleH);\n    return scale;\n  };\n  /**\n   * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.width.get = function () {\n    return this._width;\n  };\n\n  prototypeAccessors.width.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._width = value;\n\n    this._refresh();\n  };\n  /**\n   * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.height.get = function () {\n    return this._height;\n  };\n\n  prototypeAccessors.height.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._height = value;\n\n    this._refresh();\n  };\n  /**\n   * The width of the left column\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.leftWidth.get = function () {\n    return this._leftWidth;\n  };\n\n  prototypeAccessors.leftWidth.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._leftWidth = value;\n\n    this._refresh();\n  };\n  /**\n   * The width of the right column\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.rightWidth.get = function () {\n    return this._rightWidth;\n  };\n\n  prototypeAccessors.rightWidth.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._rightWidth = value;\n\n    this._refresh();\n  };\n  /**\n   * The height of the top row\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.topHeight.get = function () {\n    return this._topHeight;\n  };\n\n  prototypeAccessors.topHeight.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._topHeight = value;\n\n    this._refresh();\n  };\n  /**\n   * The height of the bottom row\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.bottomHeight.get = function () {\n    return this._bottomHeight;\n  };\n\n  prototypeAccessors.bottomHeight.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._bottomHeight = value;\n\n    this._refresh();\n  };\n  /**\n   * Refreshes NineSlicePlane coords. All of them.\n   */\n\n\n  NineSlicePlane.prototype._refresh = function _refresh() {\n    var texture = this.texture;\n    var uvs = this.geometry.buffers[1].data;\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n\n    var _uvw = 1.0 / this._origWidth;\n\n    var _uvh = 1.0 / this._origHeight;\n\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.updateHorizontalVertices();\n    this.updateVerticalVertices();\n    this.geometry.buffers[0].update();\n    this.geometry.buffers[1].update();\n  };\n\n  Object.defineProperties(NineSlicePlane.prototype, prototypeAccessors);\n  return NineSlicePlane;\n}(SimplePlane);\n\nexport { NineSlicePlane, PlaneGeometry, RopeGeometry, SimpleMesh, SimplePlane, SimpleRope };","map":null,"metadata":{},"sourceType":"module"}