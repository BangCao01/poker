{"ast":null,"code":"/*!\n * @pixi/filter-noise - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/filter-noise is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter, defaultFilterVertex } from '@pixi/core';\nvar fragment = \"precision highp float;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform float uNoise;\\nuniform float uSeed;\\nuniform sampler2D uSampler;\\n\\nfloat rand(vec2 co)\\n{\\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\\n}\\n\\nvoid main()\\n{\\n    vec4 color = texture2D(uSampler, vTextureCoord);\\n    float randomValue = rand(gl_FragCoord.xy * uSeed);\\n    float diff = (randomValue - 0.5) * uNoise;\\n\\n    // Un-premultiply alpha before applying the color matrix. See issue #3539.\\n    if (color.a > 0.0) {\\n        color.rgb /= color.a;\\n    }\\n\\n    color.r += diff;\\n    color.g += diff;\\n    color.b += diff;\\n\\n    // Premultiply alpha again.\\n    color.rgb *= color.a;\\n\\n    gl_FragColor = color;\\n}\\n\";\n/**\n * @author Vico @vicocotea\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n */\n\n/**\n * A Noise effect filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\n\nvar NoiseFilter = /*@__PURE__*/function (Filter) {\n  function NoiseFilter(noise, seed) {\n    if (noise === void 0) noise = 0.5;\n    if (seed === void 0) seed = Math.random();\n    Filter.call(this, defaultFilterVertex, fragment, {\n      uNoise: 0,\n      uSeed: 0\n    });\n    this.noise = noise;\n    this.seed = seed;\n  }\n\n  if (Filter) NoiseFilter.__proto__ = Filter;\n  NoiseFilter.prototype = Object.create(Filter && Filter.prototype);\n  NoiseFilter.prototype.constructor = NoiseFilter;\n  var prototypeAccessors = {\n    noise: {\n      configurable: true\n    },\n    seed: {\n      configurable: true\n    }\n  };\n  /**\n   * The amount of noise to apply, this value should be in the range (0, 1].\n   *\n   * @member {number}\n   * @default 0.5\n   */\n\n  prototypeAccessors.noise.get = function () {\n    return this.uniforms.uNoise;\n  };\n\n  prototypeAccessors.noise.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.uniforms.uNoise = value;\n  };\n  /**\n   * A seed value to apply to the random noise generation. `Math.random()` is a good value to use.\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.seed.get = function () {\n    return this.uniforms.uSeed;\n  };\n\n  prototypeAccessors.seed.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.uniforms.uSeed = value;\n  };\n\n  Object.defineProperties(NoiseFilter.prototype, prototypeAccessors);\n  return NoiseFilter;\n}(Filter);\n\nexport { NoiseFilter };","map":null,"metadata":{},"sourceType":"module"}