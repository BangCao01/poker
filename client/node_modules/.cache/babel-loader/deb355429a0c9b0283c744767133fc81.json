{"ast":null,"code":"import { ChatContext } from '../ChatContext';\nimport Game from './Game';\nimport PokerPlayer from '../users/PokerPlayer';\n\nclass Poker extends Game {\n  constructor(props) {\n    super(props);\n    this.Players = [];\n    this.bunny = null;\n    this.state = {\n      app: null\n    };\n  }\n\n  componentDidMount() {\n    // initiate socket connection\n    this.context.init();\n    const observable = this.context.onMessage();\n    observable.subscribe(m => {\n      // let messages = this.state.messages;\n      console.log(m); // messages.push(m);\n      // this.setState({ messages: messages });\n    });\n    super.componentDidMount();\n  }\n\n  Init() {// this.bunny = PIXI.Sprite.from(CardSheet[0]);\n    // // center the sprite's anchor point\n    // if(this.bunny !== null)\n    // console.log('BBBBBBB');\n    // this.bunny.anchor.set(0.5);\n    // // move the sprite to the center of the screen\n    // this.bunny.x = this.canvasApp.screen.width / 2;\n    // this.bunny.y = this.canvasApp.screen.height / 2;;\n    // this.bunny.scale.x = 0.3;\n    // this.bunny.scale.y = 0.3;\n    // this.canvasApp.stage.addChild(this.bunny);\n  }\n\n  InitWith(messages) {\n    let yourPlayer = new PokerPlayer(1);\n  }\n\n  loadResource() {}\n\n  Update(delta) {// this.bunny.rotation += 0.1 * delta;\n    // console.log('');\n  }\n\n  componentWillUnmount() {\n    this.context.disconnect();\n  }\n\n  render() {\n    return super.render();\n  }\n\n}\n\nPoker.contextType = ChatContext;\nexport default Poker;","map":{"version":3,"sources":["/Users/bangcao/Desktop/Projects/poker/client/src/games/Poker.tsx"],"names":["ChatContext","Game","PokerPlayer","Poker","constructor","props","Players","bunny","state","app","componentDidMount","context","init","observable","onMessage","subscribe","m","console","log","Init","InitWith","messages","yourPlayer","loadResource","Update","delta","componentWillUnmount","disconnect","render","contextType"],"mappings":"AAEA,SAASA,WAAT,QAA4B,gBAA5B;AAIA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;AAEA,MAAMC,KAAN,SAAoBF,IAApB,CAAyB;AAOvBG,EAAAA,WAAW,CAACC,KAAD,EAAY;AACrB,UAAMA,KAAN;AADqB,SAJhBC,OAIgB,GAJD,EAIC;AAAA,SAFhBC,KAEgB,GAFH,IAEG;AAAA,SADhBC,KACgB,GADH;AAACC,MAAAA,GAAG,EAAE;AAAN,KACG;AAGtB;;AAEDC,EAAAA,iBAAiB,GAAI;AAEnB;AACA,SAAKC,OAAL,CAAaC,IAAb;AAEA,UAAMC,UAAU,GAAG,KAAKF,OAAL,CAAaG,SAAb,EAAnB;AAEAD,IAAAA,UAAU,CAACE,SAAX,CAAsBC,CAAD,IAAoB;AACvC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,EAFuC,CAGvC;AACA;AACD,KALD;AAMA,UAAMN,iBAAN;AACD;;AACMS,EAAAA,IAAP,GACA,CACE;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGD;;AAEMC,EAAAA,QAAP,CAAgBC,QAAhB,EACA;AAEE,QAAIC,UAAU,GAAG,IAAIpB,WAAJ,CAAgB,CAAhB,CAAjB;AAED;;AAEMqB,EAAAA,YAAP,GACA,CAEC;;AAEMC,EAAAA,MAAP,CAAcC,KAAd,EACA,CACE;AACA;AACD;;AAEDC,EAAAA,oBAAoB,GAAI;AACtB,SAAKf,OAAL,CAAagB,UAAb;AACD;;AAEHC,EAAAA,MAAM,GAAG;AACL,WAAO,MAAMA,MAAN,EAAP;AACD;;AAxEsB;;AAAnBzB,K,CACG0B,W,GAAc7B,W;AA0EvB,eAAeG,KAAf","sourcesContent":["import React from 'react';\nimport { ChatMessage, ChatState } from '../types';\nimport { ChatContext } from '../ChatContext';\nimport * as PIXI from 'pixi.js';\nimport myImage from '../assets/cards.png';\nimport {CardSheet} from '../commons/Resource';\nimport Game from './Game';\nimport PokerPlayer from '../users/PokerPlayer';\n\nclass Poker extends Game {\n  static contextType = ChatContext;\n\n  public Players: any = [];\n  \n  public bunny: any = null;\n  public state: any = {app: null}\n  constructor(props:any) {\n    super(props);\n    \n  }\n\n  componentDidMount () {\n\n    // initiate socket connection\n    this.context.init();\n\n    const observable = this.context.onMessage();\n\n    observable.subscribe((m: ChatMessage) => {\n      // let messages = this.state.messages;\n      console.log(m);\n      // messages.push(m);\n      // this.setState({ messages: messages });\n    });\n    super.componentDidMount();\n  }\n  public Init()\n  {\n    // this.bunny = PIXI.Sprite.from(CardSheet[0]);\n\n    // // center the sprite's anchor point\n    // if(this.bunny !== null)\n    // console.log('BBBBBBB');\n\n    // this.bunny.anchor.set(0.5);\n\n    // // move the sprite to the center of the screen\n    // this.bunny.x = this.canvasApp.screen.width / 2;\n    // this.bunny.y = this.canvasApp.screen.height / 2;;\n    // this.bunny.scale.x = 0.3;\n    // this.bunny.scale.y = 0.3;\n\n    // this.canvasApp.stage.addChild(this.bunny);\n     \n    \n  }\n\n  public InitWith(messages: string)\n  {   \n\n    let yourPlayer = new PokerPlayer(1);\n\n  }\n\n  public loadResource()\n  {\n\n  }\n\n  public Update(delta:any)\n  {\n    // this.bunny.rotation += 0.1 * delta;\n    // console.log('');\n  }\n\n  componentWillUnmount () {\n    this.context.disconnect();\n  }\n\nrender() {\n    return super.render();\n  }\n}\n\nexport default Poker;\n"]},"metadata":{},"sourceType":"module"}