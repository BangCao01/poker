{"ast":null,"code":"import io from 'socket.io-client';\nimport { fromEvent } from 'rxjs';\nexport class SocketService {\n  constructor() {\n    this.socket = {};\n  }\n\n  init() {\n    console.log('initiating socket service');\n    this.socket = io('localhost:8080');\n    return this;\n  } // send a message for the server to broadcast\n\n\n  send(message) {\n    console.log('emitting message: ' + message);\n    this.socket.emit('message', message);\n  } // link message event to rxjs data source\n\n\n  onMessage() {\n    return fromEvent(this.socket, 'message');\n  } // disconnect - used when unmounting\n\n\n  disconnect() {\n    this.socket.disconnect();\n  }\n\n}","map":{"version":3,"sources":["/Users/bangcao/Desktop/Projects/ts-live-chat-demo-master/client/src/SocketService.ts"],"names":["io","fromEvent","SocketService","socket","init","console","log","send","message","emit","onMessage","disconnect"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;AAEA,SAASC,SAAT,QAAsC,MAAtC;AAEA,OAAO,MAAMC,aAAN,CAAoB;AAAA;AAAA,SACjBC,MADiB,GACe,EADf;AAAA;;AAGlBC,EAAAA,IAAP,GAA8B;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,SAAKH,MAAL,GAAcH,EAAE,CAAC,gBAAD,CAAhB;AACA,WAAO,IAAP;AACD,GAPwB,CASzB;;;AACOO,EAAAA,IAAP,CAAaC,OAAb,EAAyC;AACvCH,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBE,OAAnC;AACA,SAAKL,MAAL,CAAYM,IAAZ,CAAiB,SAAjB,EAA4BD,OAA5B;AACD,GAbwB,CAezB;;;AACOE,EAAAA,SAAP,GAA6C;AAC3C,WAAOT,SAAS,CAAC,KAAKE,MAAN,EAAc,SAAd,CAAhB;AACD,GAlBwB,CAoBzB;;;AACOQ,EAAAA,UAAP,GAA2B;AACzB,SAAKR,MAAL,CAAYQ,UAAZ;AACD;;AAvBwB","sourcesContent":["import io from 'socket.io-client';\nimport { ChatMessage } from './types';\nimport { fromEvent, Observable } from 'rxjs';\n\nexport class SocketService {\n  private socket: SocketIOClient.Socket = {} as SocketIOClient.Socket;\n\n  public init (): SocketService {\n    console.log('initiating socket service');\n    this.socket = io('localhost:8080');\n    return this;\n  }\n\n  // send a message for the server to broadcast\n  public send (message: ChatMessage): void {\n    console.log('emitting message: ' + message);\n    this.socket.emit('message', message);\n  }\n\n  // link message event to rxjs data source\n  public onMessage (): Observable<ChatMessage> {\n    return fromEvent(this.socket, 'message');\n  }\n\n  // disconnect - used when unmounting\n  public disconnect (): void {\n    this.socket.disconnect();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}