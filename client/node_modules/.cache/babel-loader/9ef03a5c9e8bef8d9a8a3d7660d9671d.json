{"ast":null,"code":"var _jsxFileName = \"/Users/bangcao/Desktop/Projects/ts-live-chat-demo-master/client/src/games/Poker.tsx\";\nimport React from 'react'; // import logo from './logo.svg';\n// import './App.css';\n\nimport { ChatContext } from '../ChatContext';\nimport * as PIXI from 'pixi.js';\nimport myImage from '../assets/cards.png';\n\nclass Poker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pixi_cnt = null;\n    this.canvasApp = null;\n    this.avatar = null;\n    this.state = {};\n\n    this.updatePixiCnt = element => {\n      // the element is the DOM object that we will use as container to add pixi stage(canvas)\n      this.pixi_cnt = element; //now we are adding the application to the DOM element which we got from the Ref.\n\n      if (this.pixi_cnt && this.pixi_cnt.children.length <= 0) {\n        this.pixi_cnt.appendChild(this.state.app.view); //The setup function is a custom function that we created to add the sprites. We will this below\n\n        this.setup();\n      }\n    };\n\n    this.setup = () => {\n      PIXI.Loader.shared.add(\"avatar\", myImage).load(this.initialize);\n    };\n\n    this.initialize = () => {\n      //We will create a sprite and then add it to stage and (0,0) position\n      this.avatar = new PIXI.Sprite(PIXI.Loader.shared.resources[\"avatar\"].texture);\n      this.state.app.stage.addChild(this.avatar);\n    };\n\n    this.pixi_cnt = null;\n    this.canvasApp = new PIXI.Application({\n      width: 600,\n      height: 600,\n      transparent: false\n    });\n  }\n\n  componentDidMount() {\n    //initiate socket connection\n    this.context.init();\n    const observable = this.context.onMessage();\n    observable.subscribe(m => {\n      let messages = this.state.messages;\n      messages.push(m);\n      this.setState({\n        messages: messages\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.context.disconnect();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: this.updatePixiCnt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n  }\n\n}\n\nPoker.contextType = ChatContext;\nexport default Poker;","map":{"version":3,"sources":["/Users/bangcao/Desktop/Projects/ts-live-chat-demo-master/client/src/games/Poker.tsx"],"names":["React","ChatContext","PIXI","myImage","Poker","Component","constructor","props","pixi_cnt","canvasApp","avatar","state","updatePixiCnt","element","children","length","appendChild","app","view","setup","Loader","shared","add","load","initialize","Sprite","resources","texture","stage","addChild","Application","width","height","transparent","componentDidMount","context","init","observable","onMessage","subscribe","m","messages","push","setState","componentWillUnmount","disconnect","render","contextType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AAEA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AAEA,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAoC;AAMlCC,EAAAA,WAAW,CAACC,KAAD,EAAY;AACrB,UAAMA,KAAN;AADqB,SAJhBC,QAIgB,GAJD,IAIC;AAAA,SAHhBC,SAGgB,GAHA,IAGA;AAAA,SAFhBC,MAEgB,GAFF,IAEE;AAAA,SADhBC,KACgB,GADH,EACG;;AAAA,SA4BvBC,aA5BuB,GA4BPC,OAAD,IAAiB;AAC9B;AACA,WAAKL,QAAL,GAAgBK,OAAhB,CAF8B,CAG9B;;AACA,UAAG,KAAKL,QAAL,IAAiB,KAAKA,QAAL,CAAcM,QAAd,CAAuBC,MAAvB,IAA+B,CAAnD,EAAsD;AACnD,aAAKP,QAAL,CAAcQ,WAAd,CAA0B,KAAKL,KAAL,CAAWM,GAAX,CAAeC,IAAzC,EADmD,CAEnD;;AACA,aAAKC,KAAL;AACF;AAEH,KAtCuB;;AAAA,SAwCxBA,KAxCwB,GAwChB,MAAM;AACbjB,MAAAA,IAAI,CAACkB,MAAL,CAAYC,MAAZ,CAAmBC,GAAnB,CAAuB,QAAvB,EAAgCnB,OAAhC,EACMoB,IADN,CACW,KAAKC,UADhB;AAED,KA3CwB;;AAAA,SA4CzBA,UA5CyB,GA4CZ,MAAM;AAChB;AACA,WAAKd,MAAL,GAAc,IAAIR,IAAI,CAACuB,MAAT,CAAgBvB,IAAI,CAACkB,MAAL,CAAYC,MAAZ,CAAmBK,SAAnB,CAA6B,QAA7B,EAAuCC,OAAvD,CAAd;AACA,WAAKhB,KAAL,CAAWM,GAAX,CAAeW,KAAf,CAAqBC,QAArB,CAA8B,KAAKnB,MAAnC;AAEF,KAjDwB;;AAErB,SAAKF,QAAL,GAAgB,IAAhB;AACA,SAAKC,SAAL,GAAiB,IAAIP,IAAI,CAAC4B,WAAT,CAAqB;AAACC,MAAAA,KAAK,EAAE,GAAR;AAAaC,MAAAA,MAAM,EAAE,GAArB;AAA0BC,MAAAA,WAAW,EAAC;AAAtC,KAArB,CAAjB;AACD;;AAEDC,EAAAA,iBAAiB,GAAI;AAEnB;AACA,SAAKC,OAAL,CAAaC,IAAb;AAEA,UAAMC,UAAU,GAAG,KAAKF,OAAL,CAAaG,SAAb,EAAnB;AAEAD,IAAAA,UAAU,CAACE,SAAX,CAAsBC,CAAD,IAAoB;AACvC,UAAIC,QAAQ,GAAG,KAAK9B,KAAL,CAAW8B,QAA1B;AAEAA,MAAAA,QAAQ,CAACC,IAAT,CAAcF,CAAd;AACA,WAAKG,QAAL,CAAc;AAAEF,QAAAA,QAAQ,EAAEA;AAAZ,OAAd;AACD,KALD;AASD;;AAEDG,EAAAA,oBAAoB,GAAI;AACtB,SAAKT,OAAL,CAAaU,UAAb;AACD;;AAyBHC,EAAAA,MAAM,GAAG;AACL,WAAO;AAAK,MAAA,GAAG,EAAE,KAAKlC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AA3DiC;;AAA9BR,K,CACG2C,W,GAAc9C,W;AA6DvB,eAAeG,KAAf","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport { ChatMessage, ChatState } from '../types';\nimport { ChatContext } from '../ChatContext';\nimport * as PIXI from 'pixi.js';\nimport myImage from '../assets/cards.png';\n\nclass Poker extends React.Component {\n  static contextType = ChatContext;\n  public pixi_cnt:any = null;\n  public canvasApp:any = null;\n  public avatar: any = null;\n  public state: any = {}\n  constructor(props:any) {\n    super(props);\n    this.pixi_cnt = null;\n    this.canvasApp = new PIXI.Application({width: 600, height: 600, transparent:false})\n  }\n\n  componentDidMount () {\n\n    //initiate socket connection\n    this.context.init();\n\n    const observable = this.context.onMessage();\n\n    observable.subscribe((m: ChatMessage) => {\n      let messages = this.state.messages;\n\n      messages.push(m);\n      this.setState({ messages: messages });\n    });\n\n   \n\n  }\n\n  componentWillUnmount () {\n    this.context.disconnect();\n  }\n\n  updatePixiCnt= (element:any) => {\n    // the element is the DOM object that we will use as container to add pixi stage(canvas)\n    this.pixi_cnt = element;\n    //now we are adding the application to the DOM element which we got from the Ref.\n    if(this.pixi_cnt && this.pixi_cnt.children.length<=0) {\n       this.pixi_cnt.appendChild(this.state.app.view);\n       //The setup function is a custom function that we created to add the sprites. We will this below\n       this.setup();\n    }\n\n };\n\n setup = () => {\n  PIXI.Loader.shared.add(\"avatar\",myImage)\n       .load(this.initialize);\n};\ninitialize = () => {\n   //We will create a sprite and then add it to stage and (0,0) position\n   this.avatar = new PIXI.Sprite(PIXI.Loader.shared.resources[\"avatar\"].texture);\n   this.state.app.stage.addChild(this.avatar);\n\n};\n  \nrender() {\n    return <div ref={this.updatePixiCnt} />;\n  }\n}\n\nexport default Poker;\n"]},"metadata":{},"sourceType":"module"}